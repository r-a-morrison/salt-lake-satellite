import torch
from torchgeo.datasets import unbind_samples
import matplotlib.pyplot as plt

def plot_images(images, axs, chnls=[3, 2, 1], bright=1):
    for img, ax in zip(images, axs):
        arr = torch.clamp(bright * img, min=0, max=1).numpy()
        rgb = arr.transpose(1, 2, 0)[:, :, chnls]
        ax.imshow(rgb)
        ax.axis('off')

def plot_masks(masks, axs):
    for mask, ax in zip(masks, axs):
        ax.imshow(mask.squeeze().numpy(), cmap='Blues')
        ax.axis('off')

def plot_batch(batch, bright=1, cols=4, width=5, chnls=[3, 2, 1]):
    # Get the samples and the number of items in the batch
    samples = unbind_samples(batch.copy())
    
    # If batch contains images and masks, the number of images will be doubled
    n = 2 * len(samples) if ('image' in batch) and ('mask' in batch) else len(samples)

    # Calculate the number of rows in the grid
    rows = n//cols + (1 if n%cols != 0 else 0)

    # Create a grid
    _, axs = plt.subplots(rows, cols, figsize=(cols*width, rows*width))  

    if ('image' in batch) and ('mask' in batch):
        # Plot the images on the even axis
        plot_images(images=map(lambda x: x['image'], samples), 
            axs=axs.reshape(-1)[::2], 
            chnls=chnls, 
            bright=bright)

        # Plot the masks on the odd axis
        plot_masks(masks=map(lambda x: x['mask'], samples), 
                  axs=axs.reshape(-1)[1::2])

    else:
        if 'image' in batch:
            plot_images(images=map(lambda x: x['image'], samples), 
                      axs=axs.reshape(-1), 
                      chnls=chnls, 
                      bright=bright)
        elif 'mask' in batch:
            plot_masks(
                masks=map(lambda x: x['mask'], samples), 
                axs=axs.reshape(-1))
